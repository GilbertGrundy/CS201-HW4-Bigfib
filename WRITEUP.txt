Gilbert Grundy CS201
Homework 4 - Bigfib


1.  I ran 'time ./bigfib 100000 >/dev/null' three times,
    and got this output:

    real    0m0.367s
    user    0m0.363s
    sys     0m0.004s

    real    0m0.368s
    user    0m0.367s
    sys     0m0.001s

    real    0m0.363s
    user    0m0.363s
    sys     0m0.000s


2.  I ran 'time python3 bigfib.py 100000 >/dev/null' three times,
    and got this output:

    real    0m0.236s
    user    0m0.214s
    sys     0m0.009s

    real    0m0.231s
    user    0m0.215s
    sys     0m0.016s

    real    0m0.219s
    user    0m0.215s
    sys     0m0.004s


3.  I turned on the profiling flags in the Makefile, and turned off
    the optimization, ran the program then ran 'gprof bigfib gmon.out'.
    Here's some of the output:
    
    Each sample counts as 0.01 seconds.
    %   cumulative   self              self     total
    time   seconds   seconds    calls  ns/call  ns/call  name
    53.05      0.09     0.09 54284216     1.66     1.66  addc_c
    41.26      0.16     0.07                             bigint_add
    5.89      0.17     0.01                             bigint_print
    0.00      0.17     0.00   100000     0.00     0.00  bigint_new
    0.00      0.17     0.00     1084     0.00     0.00  addc_c.constprop.0
    0.00      0.17     0.00     1084     0.00     0.00  bigint_grow
    0.00      0.17     0.00        2     0.00     0.00  hex_digit_value

    It appears I spent 50% of the program time inside the bigint_add function,
    and 35% in the addc_asm_jump function.

4.  With the profilling turned off and turning on ADDC_ASM_JMP I get this
    output:

    Each sample counts as 0.01 seconds.
    %   cumulative   self              self     total
    time   seconds   seconds    calls  ns/call  ns/call  name
    50.10      0.10     0.10                             bigint_add
    35.07      0.17     0.07 54285300     1.29     1.29  addc_asm_jmp
    15.03      0.20     0.03                             bigint_print
    0.00      0.20     0.00   100000     0.00     0.00  bigint_new
    0.00      0.20     0.00     1084     0.00     0.00  bigint_grow
    0.00      0.20     0.00        2     0.00     0.00  hex_digit_value
    
    It does appear that the C code and assembly code do perform very similarly.


5.  I ran './unit' and it output:

    all tests passed
    
    
6.  In my addc_asm_adc() function I changed 'cout' to a uint8_t so I could
    use setc with it. My asm function looks like this:

    asm(
        "xorb   %1, %1\n\t"
        "cmpq   $1, %4\n\t"
        "cmc          \n\t"
        "movq	%2, %0\n\t"
        "adcq	%3, %0\n\t"
        "setc       %1\n\t"
        : "=&rm" (sum), "=&rm"(cout)
        : "rm" (b1), "rm" (b2), "r" (cin)
        : "cc"
       );

    It passes the 8 tests inside ./unit,and when I re-ran 
    'time ./bigfib 100000 >/dev/null' three times I got these values:

    real    0m0.088s
    user    0m0.082s
    sys     0m0.004s

    real    0m0.086s
    user    0m0.082s
    sys     0m0.004s

    real    0m0.116s
    user    0m0.115s
    sys     0m0.000s

    So, it appears that I've sped up the code significantly.
    
    Took me a while to rap my head round the assembly code, but after reading
    the hints that Bart gave us, and the explanation of the assembly functions,
    and a little trial and error, I got the code to work!
    
    Feel like this assignment has helped me understand in-line assembly code
    much better. Hopefully with practice assembly will become more natural to
    me.     
